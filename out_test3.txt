
Lexeme - $, Line - 1:
	 <Rat22F>  ::=   <Opt Function Definitions>   $  <Opt Declaration List>  <Statement List>  $
Lexeme - integer, Line - 2:
	 <Opt Function Definitions> ::= <Function Definitions>
Lexeme - integer, Line - 2:
	 <Declaration List> ::= <Declaration> ; <Declaration List’>
Lexeme - integer, Line - 2:
	 <Declaration> ::=   <Qualifier > <IDs> 
Lexeme - integer, Line - 2:
	 <Qualifier> ::= integer
Lexeme - x, Line - 2:
	 <IDs> ::= 	<Identifier><IDs’>
Lexeme - ;, Line - 2:
	 <IDs’> ::= <Empty>
Lexeme - ;, Line - 2:
	 <Empty>   ::= <Empty>
Lexeme - x, Line - 3:
	 <Declaration List’> ::= <Empty>
Lexeme - x, Line - 3:
	 <Empty>   ::= <Empty>
Lexeme - x, Line - 3:
	 <Statement List> ::=   <Statement><Statement List’>
Lexeme - x, Line - 3:
	 <Statement> ::=   <Assign> 
Lexeme - 100, Line - 3:
	 <Expression>  ::= <Term><Expression’>
Lexeme - 100, Line - 3:
	 <Term>  ::= <Factor><Term’>
Lexeme - 100, Line - 3:
	 <Factor> ::= <Primary>
Lexeme - 100, Line - 3:
	 <Primary> ::=  <Integer>
Lexeme - ;, Line - 3:
	 <Term’> ::= <Empty>
Lexeme - ;, Line - 3:
	 <Empty>   ::= <Empty>
Lexeme - ;, Line - 3:
	 <Expression’> ::= <Empty>
Lexeme - ;, Line - 3:
	 <Empty>   ::= <Empty>
Lexeme - ;, Line - 3:
	 <Assign> ::= <Identifier> = <Expression> ;
Lexeme - while, Line - 4:
	 <Statement List’> ::=  <Statement List>
Lexeme - while, Line - 4:
	 <Statement> ::=   <While> 
Lexeme - (, Line - 4:
	 <While> ::=  while ( <Condition>  )  <Statement> 
Lexeme - x, Line - 4:
	 <Condition> ::= 	<Expression>  <Relop>   <Expression>
Lexeme - x, Line - 4:
	 <Expression>  ::= <Term><Expression’>
Lexeme - x, Line - 4:
	 <Term>  ::= <Factor><Term’>
Lexeme - x, Line - 4:
	 <Factor> ::= <Primary>
Lexeme - x, Line - 4:
	 <Primary> ::=  <Identifier> <Primary’>
Lexeme - !=, Line - 4:
	 <Primary’> ::= <Empty>
Lexeme - !=, Line - 4:
	 <Empty>   ::= <Empty>
Lexeme - !=, Line - 4:
	 <Term’> ::= <Empty>
Lexeme - !=, Line - 4:
	 <Empty>   ::= <Empty>
Lexeme - !=, Line - 4:
	 <Expression’> ::= <Empty>
Lexeme - !=, Line - 4:
	 <Empty>   ::= <Empty>
Lexeme - !=, Line - 4:
	 <Relop> ::=    	==   |   !=	|   > 	|   <	|  <=   |	=>
Lexeme - 0, Line - 4:
	 <Expression>  ::= <Term><Expression’>
Lexeme - 0, Line - 4:
	 <Term>  ::= <Factor><Term’>
Lexeme - 0, Line - 4:
	 <Factor> ::= <Primary>
Lexeme - 0, Line - 4:
	 <Primary> ::=  <Integer>
Lexeme - ), Line - 4:
	 <Term’> ::= <Empty>
Lexeme - ), Line - 4:
	 <Empty>   ::= <Empty>
Lexeme - ), Line - 4:
	 <Expression’> ::= <Empty>
Lexeme - ), Line - 4:
	 <Empty>   ::= <Empty>
Lexeme - {, Line - 4:
	 <Statement> ::=   <Compound> 
Lexeme - if, Line - 5:
	 <Statement List> ::=   <Statement><Statement List’>
Lexeme - if, Line - 5:
	 <Statement> ::=   <If> 
Lexeme - x, Line - 5:
	 <Condition> ::= 	<Expression>  <Relop>   <Expression>
Lexeme - x, Line - 5:
	 <Expression>  ::= <Term><Expression’>
Lexeme - x, Line - 5:
	 <Term>  ::= <Factor><Term’>
Lexeme - x, Line - 5:
	 <Factor> ::= <Primary>
Lexeme - x, Line - 5:
	 <Primary> ::=  <Identifier> <Primary’>
Lexeme - ==, Line - 5:
	 <Primary’> ::= <Empty>
Lexeme - ==, Line - 5:
	 <Empty>   ::= <Empty>
Lexeme - ==, Line - 5:
	 <Term’> ::= <Empty>
Lexeme - ==, Line - 5:
	 <Empty>   ::= <Empty>
Lexeme - ==, Line - 5:
	 <Expression’> ::= <Empty>
Lexeme - ==, Line - 5:
	 <Empty>   ::= <Empty>
Lexeme - ==, Line - 5:
	 <Relop> ::=    	==   |   !=	|   > 	|   <	|  <=   |	=>
Lexeme - 100, Line - 5:
	 <Expression>  ::= <Term><Expression’>
Lexeme - 100, Line - 5:
	 <Term>  ::= <Factor><Term’>
Lexeme - 100, Line - 5:
	 <Factor> ::= <Primary>
Lexeme - 100, Line - 5:
	 <Primary> ::=  <Integer>
Lexeme - ), Line - 5:
	 <Term’> ::= <Empty>
Lexeme - ), Line - 5:
	 <Empty>   ::= <Empty>
Lexeme - ), Line - 5:
	 <Expression’> ::= <Empty>
Lexeme - ), Line - 5:
	 <Empty>   ::= <Empty>
Lexeme - {, Line - 6:
	 <Statement> ::=   <Compound> 
Lexeme - x, Line - 7:
	 <Statement List> ::=   <Statement><Statement List’>
Lexeme - x, Line - 7:
	 <Statement> ::=   <Assign> 
Lexeme - x, Line - 7:
	 <Expression>  ::= <Term><Expression’>
Lexeme - x, Line - 7:
	 <Term>  ::= <Factor><Term’>
Lexeme - x, Line - 7:
	 <Factor> ::= <Primary>
Lexeme - x, Line - 7:
	 <Primary> ::=  <Identifier> <Primary’>
Lexeme - -, Line - 7:
	 <Primary’> ::= <Empty>
Lexeme - -, Line - 7:
	 <Empty>   ::= <Empty>
Lexeme - -, Line - 7:
	 <Term’> ::= <Empty>
Lexeme - -, Line - 7:
	 <Empty>   ::= <Empty>
Lexeme - -, Line - 7:
	 <Expression’> ::= -<Term><Expression’>
Lexeme - 10, Line - 7:
	 <Term>  ::= <Factor><Term’>
Lexeme - 10, Line - 7:
	 <Factor> ::= <Primary>
Lexeme - 10, Line - 7:
	 <Primary> ::=  <Integer>
Lexeme - ;, Line - 7:
	 <Term’> ::= <Empty>
Lexeme - ;, Line - 7:
	 <Empty>   ::= <Empty>
Lexeme - ;, Line - 7:
	 <Expression’> ::= <Empty>
Lexeme - ;, Line - 7:
	 <Empty>   ::= <Empty>
Lexeme - ;, Line - 7:
	 <Assign> ::= <Identifier> = <Expression> ;
Lexeme - put, Line - 8:
	 <Statement List’> ::=  <Statement List>
Lexeme - put, Line - 8:
	 <Statement> ::=   <Print> 
Lexeme - x, Line - 8:
	 <Expression>  ::= <Term><Expression’>
Lexeme - x, Line - 8:
	 <Term>  ::= <Factor><Term’>
Lexeme - x, Line - 8:
	 <Factor> ::= <Primary>
Lexeme - x, Line - 8:
	 <Primary> ::=  <Identifier> <Primary’>
Lexeme - ), Line - 8:
	 <Primary’> ::= <Empty>
Lexeme - ), Line - 8:
	 <Empty>   ::= <Empty>
Lexeme - ), Line - 8:
	 <Term’> ::= <Empty>
Lexeme - ), Line - 8:
	 <Empty>   ::= <Empty>
Lexeme - ), Line - 8:
	 <Expression’> ::= <Empty>
Lexeme - ), Line - 8:
	 <Empty>   ::= <Empty>
Lexeme - ;, Line - 8:
	 <Print> ::=	put ( <Expression>);
Lexeme - }, Line - 9:
	 <Statement List’> ::=  <Empty>
Lexeme - }, Line - 9:
	 <Empty>   ::= <Empty>
Lexeme - }, Line - 9:
	 <Compound> ::=   {  <Statement List>  }
Lexeme - else, Line - 10:
	 <If’> ::= else  <Statement>
Lexeme - if, Line - 10:
	 <Statement> ::=   <If> 
Lexeme - x, Line - 10:
	 <Condition> ::= 	<Expression>  <Relop>   <Expression>
Lexeme - x, Line - 10:
	 <Expression>  ::= <Term><Expression’>
Lexeme - x, Line - 10:
	 <Term>  ::= <Factor><Term’>
Lexeme - x, Line - 10:
	 <Factor> ::= <Primary>
Lexeme - x, Line - 10:
	 <Primary> ::=  <Identifier> <Primary’>
Lexeme - ==, Line - 10:
	 <Primary’> ::= <Empty>
Lexeme - ==, Line - 10:
	 <Empty>   ::= <Empty>
Lexeme - ==, Line - 10:
	 <Term’> ::= <Empty>
Lexeme - ==, Line - 10:
	 <Empty>   ::= <Empty>
Lexeme - ==, Line - 10:
	 <Expression’> ::= <Empty>
Lexeme - ==, Line - 10:
	 <Empty>   ::= <Empty>
Lexeme - ==, Line - 10:
	 <Relop> ::=    	==   |   !=	|   > 	|   <	|  <=   |	=>
Lexeme - 90, Line - 10:
	 <Expression>  ::= <Term><Expression’>
Lexeme - 90, Line - 10:
	 <Term>  ::= <Factor><Term’>
Lexeme - 90, Line - 10:
	 <Factor> ::= <Primary>
Lexeme - 90, Line - 10:
	 <Primary> ::=  <Integer>
Lexeme - ), Line - 10:
	 <Term’> ::= <Empty>
Lexeme - ), Line - 10:
	 <Empty>   ::= <Empty>
Lexeme - ), Line - 10:
	 <Expression’> ::= <Empty>
Lexeme - ), Line - 10:
	 <Empty>   ::= <Empty>
Lexeme - {, Line - 11:
	 <Statement> ::=   <Compound> 
Lexeme - x, Line - 12:
	 <Statement List> ::=   <Statement><Statement List’>
Lexeme - x, Line - 12:
	 <Statement> ::=   <Assign> 
Lexeme - x, Line - 12:
	 <Expression>  ::= <Term><Expression’>
Lexeme - x, Line - 12:
	 <Term>  ::= <Factor><Term’>
Lexeme - x, Line - 12:
	 <Factor> ::= <Primary>
Lexeme - x, Line - 12:
	 <Primary> ::=  <Identifier> <Primary’>
Lexeme - -, Line - 12:
	 <Primary’> ::= <Empty>
Lexeme - -, Line - 12:
	 <Empty>   ::= <Empty>
Lexeme - -, Line - 12:
	 <Term’> ::= <Empty>
Lexeme - -, Line - 12:
	 <Empty>   ::= <Empty>
Lexeme - -, Line - 12:
	 <Expression’> ::= -<Term><Expression’>
Lexeme - 10, Line - 12:
	 <Term>  ::= <Factor><Term’>
Lexeme - 10, Line - 12:
	 <Factor> ::= <Primary>
Lexeme - 10, Line - 12:
	 <Primary> ::=  <Integer>
Lexeme - ;, Line - 12:
	 <Term’> ::= <Empty>
Lexeme - ;, Line - 12:
	 <Empty>   ::= <Empty>
Lexeme - ;, Line - 12:
	 <Expression’> ::= <Empty>
Lexeme - ;, Line - 12:
	 <Empty>   ::= <Empty>
Lexeme - ;, Line - 12:
	 <Assign> ::= <Identifier> = <Expression> ;
Lexeme - put, Line - 13:
	 <Statement List’> ::=  <Statement List>
Lexeme - put, Line - 13:
	 <Statement> ::=   <Print> 
Lexeme - x, Line - 13:
	 <Expression>  ::= <Term><Expression’>
Lexeme - x, Line - 13:
	 <Term>  ::= <Factor><Term’>
Lexeme - x, Line - 13:
	 <Factor> ::= <Primary>
Lexeme - x, Line - 13:
	 <Primary> ::=  <Identifier> <Primary’>
Lexeme - ), Line - 13:
	 <Primary’> ::= <Empty>
Lexeme - ), Line - 13:
	 <Empty>   ::= <Empty>
Lexeme - ), Line - 13:
	 <Term’> ::= <Empty>
Lexeme - ), Line - 13:
	 <Empty>   ::= <Empty>
Lexeme - ), Line - 13:
	 <Expression’> ::= <Empty>
Lexeme - ), Line - 13:
	 <Empty>   ::= <Empty>
Lexeme - ;, Line - 13:
	 <Print> ::=	put ( <Expression>);
Lexeme - }, Line - 14:
	 <Statement List’> ::=  <Empty>
Lexeme - }, Line - 14:
	 <Empty>   ::= <Empty>
Lexeme - }, Line - 14:
	 <Compound> ::=   {  <Statement List>  }
Lexeme - else, Line - 15:
	 <If’> ::= else  <Statement>
Lexeme - if, Line - 15:
	 <Statement> ::=   <If> 
Lexeme - x, Line - 15:
	 <Condition> ::= 	<Expression>  <Relop>   <Expression>
Lexeme - x, Line - 15:
	 <Expression>  ::= <Term><Expression’>
Lexeme - x, Line - 15:
	 <Term>  ::= <Factor><Term’>
Lexeme - x, Line - 15:
	 <Factor> ::= <Primary>
Lexeme - x, Line - 15:
	 <Primary> ::=  <Identifier> <Primary’>
Lexeme - ==, Line - 15:
	 <Primary’> ::= <Empty>
Lexeme - ==, Line - 15:
	 <Empty>   ::= <Empty>
Lexeme - ==, Line - 15:
	 <Term’> ::= <Empty>
Lexeme - ==, Line - 15:
	 <Empty>   ::= <Empty>
Lexeme - ==, Line - 15:
	 <Expression’> ::= <Empty>
Lexeme - ==, Line - 15:
	 <Empty>   ::= <Empty>
Lexeme - ==, Line - 15:
	 <Relop> ::=    	==   |   !=	|   > 	|   <	|  <=   |	=>
Lexeme - 80, Line - 15:
	 <Expression>  ::= <Term><Expression’>
Lexeme - 80, Line - 15:
	 <Term>  ::= <Factor><Term’>
Lexeme - 80, Line - 15:
	 <Factor> ::= <Primary>
Lexeme - 80, Line - 15:
	 <Primary> ::=  <Integer>
Lexeme - ), Line - 15:
	 <Term’> ::= <Empty>
Lexeme - ), Line - 15:
	 <Empty>   ::= <Empty>
Lexeme - ), Line - 15:
	 <Expression’> ::= <Empty>
Lexeme - ), Line - 15:
	 <Empty>   ::= <Empty>
Lexeme - {, Line - 16:
	 <Statement> ::=   <Compound> 
Lexeme - x, Line - 17:
	 <Statement List> ::=   <Statement><Statement List’>
Lexeme - x, Line - 17:
	 <Statement> ::=   <Assign> 
Lexeme - x, Line - 17:
	 <Expression>  ::= <Term><Expression’>
Lexeme - x, Line - 17:
	 <Term>  ::= <Factor><Term’>
Lexeme - x, Line - 17:
	 <Factor> ::= <Primary>
Lexeme - x, Line - 17:
	 <Primary> ::=  <Identifier> <Primary’>
Lexeme - -, Line - 17:
	 <Primary’> ::= <Empty>
Lexeme - -, Line - 17:
	 <Empty>   ::= <Empty>
Lexeme - -, Line - 17:
	 <Term’> ::= <Empty>
Lexeme - -, Line - 17:
	 <Empty>   ::= <Empty>
Lexeme - -, Line - 17:
	 <Expression’> ::= -<Term><Expression’>
Lexeme - 10, Line - 17:
	 <Term>  ::= <Factor><Term’>
Lexeme - 10, Line - 17:
	 <Factor> ::= <Primary>
Lexeme - 10, Line - 17:
	 <Primary> ::=  <Integer>
Lexeme - ;, Line - 17:
	 <Term’> ::= <Empty>
Lexeme - ;, Line - 17:
	 <Empty>   ::= <Empty>
Lexeme - ;, Line - 17:
	 <Expression’> ::= <Empty>
Lexeme - ;, Line - 17:
	 <Empty>   ::= <Empty>
Lexeme - ;, Line - 17:
	 <Assign> ::= <Identifier> = <Expression> ;
Lexeme - put, Line - 18:
	 <Statement List’> ::=  <Statement List>
Lexeme - put, Line - 18:
	 <Statement> ::=   <Print> 
Lexeme - x, Line - 18:
	 <Expression>  ::= <Term><Expression’>
Lexeme - x, Line - 18:
	 <Term>  ::= <Factor><Term’>
Lexeme - x, Line - 18:
	 <Factor> ::= <Primary>
Lexeme - x, Line - 18:
	 <Primary> ::=  <Identifier> <Primary’>
Lexeme - ), Line - 18:
	 <Primary’> ::= <Empty>
Lexeme - ), Line - 18:
	 <Empty>   ::= <Empty>
Lexeme - ), Line - 18:
	 <Term’> ::= <Empty>
Lexeme - ), Line - 18:
	 <Empty>   ::= <Empty>
Lexeme - ), Line - 18:
	 <Expression’> ::= <Empty>
Lexeme - ), Line - 18:
	 <Empty>   ::= <Empty>
Lexeme - ;, Line - 18:
	 <Print> ::=	put ( <Expression>);
Lexeme - }, Line - 19:
	 <Statement List’> ::=  <Empty>
Lexeme - }, Line - 19:
	 <Empty>   ::= <Empty>
Lexeme - }, Line - 19:
	 <Compound> ::=   {  <Statement List>  }
Lexeme - else, Line - 20:
	 <If’> ::= else  <Statement>
Lexeme - if, Line - 20:
	 <Statement> ::=   <If> 
Lexeme - x, Line - 20:
	 <Condition> ::= 	<Expression>  <Relop>   <Expression>
Lexeme - x, Line - 20:
	 <Expression>  ::= <Term><Expression’>
Lexeme - x, Line - 20:
	 <Term>  ::= <Factor><Term’>
Lexeme - x, Line - 20:
	 <Factor> ::= <Primary>
Lexeme - x, Line - 20:
	 <Primary> ::=  <Identifier> <Primary’>
Lexeme - ==, Line - 20:
	 <Primary’> ::= <Empty>
Lexeme - ==, Line - 20:
	 <Empty>   ::= <Empty>
Lexeme - ==, Line - 20:
	 <Term’> ::= <Empty>
Lexeme - ==, Line - 20:
	 <Empty>   ::= <Empty>
Lexeme - ==, Line - 20:
	 <Expression’> ::= <Empty>
Lexeme - ==, Line - 20:
	 <Empty>   ::= <Empty>
Lexeme - ==, Line - 20:
	 <Relop> ::=    	==   |   !=	|   > 	|   <	|  <=   |	=>
Lexeme - 70, Line - 20:
	 <Expression>  ::= <Term><Expression’>
Lexeme - 70, Line - 20:
	 <Term>  ::= <Factor><Term’>
Lexeme - 70, Line - 20:
	 <Factor> ::= <Primary>
Lexeme - 70, Line - 20:
	 <Primary> ::=  <Integer>
Lexeme - ), Line - 20:
	 <Term’> ::= <Empty>
Lexeme - ), Line - 20:
	 <Empty>   ::= <Empty>
Lexeme - ), Line - 20:
	 <Expression’> ::= <Empty>
Lexeme - ), Line - 20:
	 <Empty>   ::= <Empty>
Lexeme - {, Line - 21:
	 <Statement> ::=   <Compound> 
Lexeme - x, Line - 22:
	 <Statement List> ::=   <Statement><Statement List’>
Lexeme - x, Line - 22:
	 <Statement> ::=   <Assign> 
Lexeme - x, Line - 22:
	 <Expression>  ::= <Term><Expression’>
Lexeme - x, Line - 22:
	 <Term>  ::= <Factor><Term’>
Lexeme - x, Line - 22:
	 <Factor> ::= <Primary>
Lexeme - x, Line - 22:
	 <Primary> ::=  <Identifier> <Primary’>
Lexeme - -, Line - 22:
	 <Primary’> ::= <Empty>
Lexeme - -, Line - 22:
	 <Empty>   ::= <Empty>
Lexeme - -, Line - 22:
	 <Term’> ::= <Empty>
Lexeme - -, Line - 22:
	 <Empty>   ::= <Empty>
Lexeme - -, Line - 22:
	 <Expression’> ::= -<Term><Expression’>
Lexeme - 10, Line - 22:
	 <Term>  ::= <Factor><Term’>
Lexeme - 10, Line - 22:
	 <Factor> ::= <Primary>
Lexeme - 10, Line - 22:
	 <Primary> ::=  <Integer>
Lexeme - ;, Line - 22:
	 <Term’> ::= <Empty>
Lexeme - ;, Line - 22:
	 <Empty>   ::= <Empty>
Lexeme - ;, Line - 22:
	 <Expression’> ::= <Empty>
Lexeme - ;, Line - 22:
	 <Empty>   ::= <Empty>
Lexeme - ;, Line - 22:
	 <Assign> ::= <Identifier> = <Expression> ;
Lexeme - put, Line - 23:
	 <Statement List’> ::=  <Statement List>
Lexeme - put, Line - 23:
	 <Statement> ::=   <Print> 
Lexeme - x, Line - 23:
	 <Expression>  ::= <Term><Expression’>
Lexeme - x, Line - 23:
	 <Term>  ::= <Factor><Term’>
Lexeme - x, Line - 23:
	 <Factor> ::= <Primary>
Lexeme - x, Line - 23:
	 <Primary> ::=  <Identifier> <Primary’>
Lexeme - ), Line - 23:
	 <Primary’> ::= <Empty>
Lexeme - ), Line - 23:
	 <Empty>   ::= <Empty>
Lexeme - ), Line - 23:
	 <Term’> ::= <Empty>
Lexeme - ), Line - 23:
	 <Empty>   ::= <Empty>
Lexeme - ), Line - 23:
	 <Expression’> ::= <Empty>
Lexeme - ), Line - 23:
	 <Empty>   ::= <Empty>
Lexeme - ;, Line - 23:
	 <Print> ::=	put ( <Expression>);
Lexeme - }, Line - 24:
	 <Statement List’> ::=  <Empty>
Lexeme - }, Line - 24:
	 <Empty>   ::= <Empty>
Lexeme - }, Line - 24:
	 <Compound> ::=   {  <Statement List>  }
Lexeme - else, Line - 25:
	 <If’> ::= else  <Statement>
Lexeme - if, Line - 25:
	 <Statement> ::=   <If> 
Lexeme - x, Line - 25:
	 <Condition> ::= 	<Expression>  <Relop>   <Expression>
Lexeme - x, Line - 25:
	 <Expression>  ::= <Term><Expression’>
Lexeme - x, Line - 25:
	 <Term>  ::= <Factor><Term’>
Lexeme - x, Line - 25:
	 <Factor> ::= <Primary>
Lexeme - x, Line - 25:
	 <Primary> ::=  <Identifier> <Primary’>
Lexeme - ==, Line - 25:
	 <Primary’> ::= <Empty>
Lexeme - ==, Line - 25:
	 <Empty>   ::= <Empty>
Lexeme - ==, Line - 25:
	 <Term’> ::= <Empty>
Lexeme - ==, Line - 25:
	 <Empty>   ::= <Empty>
Lexeme - ==, Line - 25:
	 <Expression’> ::= <Empty>
Lexeme - ==, Line - 25:
	 <Empty>   ::= <Empty>
Lexeme - ==, Line - 25:
	 <Relop> ::=    	==   |   !=	|   > 	|   <	|  <=   |	=>
Lexeme - 60, Line - 25:
	 <Expression>  ::= <Term><Expression’>
Lexeme - 60, Line - 25:
	 <Term>  ::= <Factor><Term’>
Lexeme - 60, Line - 25:
	 <Factor> ::= <Primary>
Lexeme - 60, Line - 25:
	 <Primary> ::=  <Integer>
Lexeme - ), Line - 25:
	 <Term’> ::= <Empty>
Lexeme - ), Line - 25:
	 <Empty>   ::= <Empty>
Lexeme - ), Line - 25:
	 <Expression’> ::= <Empty>
Lexeme - ), Line - 25:
	 <Empty>   ::= <Empty>
Lexeme - {, Line - 26:
	 <Statement> ::=   <Compound> 
Lexeme - x, Line - 27:
	 <Statement List> ::=   <Statement><Statement List’>
Lexeme - x, Line - 27:
	 <Statement> ::=   <Assign> 
Lexeme - x, Line - 27:
	 <Expression>  ::= <Term><Expression’>
Lexeme - x, Line - 27:
	 <Term>  ::= <Factor><Term’>
Lexeme - x, Line - 27:
	 <Factor> ::= <Primary>
Lexeme - x, Line - 27:
	 <Primary> ::=  <Identifier> <Primary’>
Lexeme - -, Line - 27:
	 <Primary’> ::= <Empty>
Lexeme - -, Line - 27:
	 <Empty>   ::= <Empty>
Lexeme - -, Line - 27:
	 <Term’> ::= <Empty>
Lexeme - -, Line - 27:
	 <Empty>   ::= <Empty>
Lexeme - -, Line - 27:
	 <Expression’> ::= -<Term><Expression’>
Lexeme - 10, Line - 27:
	 <Term>  ::= <Factor><Term’>
Lexeme - 10, Line - 27:
	 <Factor> ::= <Primary>
Lexeme - 10, Line - 27:
	 <Primary> ::=  <Integer>
Lexeme - ;, Line - 27:
	 <Term’> ::= <Empty>
Lexeme - ;, Line - 27:
	 <Empty>   ::= <Empty>
Lexeme - ;, Line - 27:
	 <Expression’> ::= <Empty>
Lexeme - ;, Line - 27:
	 <Empty>   ::= <Empty>
Lexeme - ;, Line - 27:
	 <Assign> ::= <Identifier> = <Expression> ;
Lexeme - put, Line - 28:
	 <Statement List’> ::=  <Statement List>
Lexeme - put, Line - 28:
	 <Statement> ::=   <Print> 
Lexeme - x, Line - 28:
	 <Expression>  ::= <Term><Expression’>
Lexeme - x, Line - 28:
	 <Term>  ::= <Factor><Term’>
Lexeme - x, Line - 28:
	 <Factor> ::= <Primary>
Lexeme - x, Line - 28:
	 <Primary> ::=  <Identifier> <Primary’>
Lexeme - ), Line - 28:
	 <Primary’> ::= <Empty>
Lexeme - ), Line - 28:
	 <Empty>   ::= <Empty>
Lexeme - ), Line - 28:
	 <Term’> ::= <Empty>
Lexeme - ), Line - 28:
	 <Empty>   ::= <Empty>
Lexeme - ), Line - 28:
	 <Expression’> ::= <Empty>
Lexeme - ), Line - 28:
	 <Empty>   ::= <Empty>
Lexeme - ;, Line - 28:
	 <Print> ::=	put ( <Expression>);
Lexeme - }, Line - 29:
	 <Statement List’> ::=  <Empty>
Lexeme - }, Line - 29:
	 <Empty>   ::= <Empty>
Lexeme - }, Line - 29:
	 <Compound> ::=   {  <Statement List>  }
Lexeme - else, Line - 30:
	 <If’> ::= else  <Statement>
Lexeme - if, Line - 30:
	 <Statement> ::=   <If> 
Lexeme - x, Line - 30:
	 <Condition> ::= 	<Expression>  <Relop>   <Expression>
Lexeme - x, Line - 30:
	 <Expression>  ::= <Term><Expression’>
Lexeme - x, Line - 30:
	 <Term>  ::= <Factor><Term’>
Lexeme - x, Line - 30:
	 <Factor> ::= <Primary>
Lexeme - x, Line - 30:
	 <Primary> ::=  <Identifier> <Primary’>
Lexeme - ==, Line - 30:
	 <Primary’> ::= <Empty>
Lexeme - ==, Line - 30:
	 <Empty>   ::= <Empty>
Lexeme - ==, Line - 30:
	 <Term’> ::= <Empty>
Lexeme - ==, Line - 30:
	 <Empty>   ::= <Empty>
Lexeme - ==, Line - 30:
	 <Expression’> ::= <Empty>
Lexeme - ==, Line - 30:
	 <Empty>   ::= <Empty>
Lexeme - ==, Line - 30:
	 <Relop> ::=    	==   |   !=	|   > 	|   <	|  <=   |	=>
Lexeme - 50, Line - 30:
	 <Expression>  ::= <Term><Expression’>
Lexeme - 50, Line - 30:
	 <Term>  ::= <Factor><Term’>
Lexeme - 50, Line - 30:
	 <Factor> ::= <Primary>
Lexeme - 50, Line - 30:
	 <Primary> ::=  <Integer>
Lexeme - ), Line - 30:
	 <Term’> ::= <Empty>
Lexeme - ), Line - 30:
	 <Empty>   ::= <Empty>
Lexeme - ), Line - 30:
	 <Expression’> ::= <Empty>
Lexeme - ), Line - 30:
	 <Empty>   ::= <Empty>
Lexeme - {, Line - 31:
	 <Statement> ::=   <Compound> 
Lexeme - x, Line - 32:
	 <Statement List> ::=   <Statement><Statement List’>
Lexeme - x, Line - 32:
	 <Statement> ::=   <Assign> 
Lexeme - x, Line - 32:
	 <Expression>  ::= <Term><Expression’>
Lexeme - x, Line - 32:
	 <Term>  ::= <Factor><Term’>
Lexeme - x, Line - 32:
	 <Factor> ::= <Primary>
Lexeme - x, Line - 32:
	 <Primary> ::=  <Identifier> <Primary’>
Lexeme - -, Line - 32:
	 <Primary’> ::= <Empty>
Lexeme - -, Line - 32:
	 <Empty>   ::= <Empty>
Lexeme - -, Line - 32:
	 <Term’> ::= <Empty>
Lexeme - -, Line - 32:
	 <Empty>   ::= <Empty>
Lexeme - -, Line - 32:
	 <Expression’> ::= -<Term><Expression’>
Lexeme - 10, Line - 32:
	 <Term>  ::= <Factor><Term’>
Lexeme - 10, Line - 32:
	 <Factor> ::= <Primary>
Lexeme - 10, Line - 32:
	 <Primary> ::=  <Integer>
Lexeme - ;, Line - 32:
	 <Term’> ::= <Empty>
Lexeme - ;, Line - 32:
	 <Empty>   ::= <Empty>
Lexeme - ;, Line - 32:
	 <Expression’> ::= <Empty>
Lexeme - ;, Line - 32:
	 <Empty>   ::= <Empty>
Lexeme - ;, Line - 32:
	 <Assign> ::= <Identifier> = <Expression> ;
Lexeme - put, Line - 33:
	 <Statement List’> ::=  <Statement List>
Lexeme - put, Line - 33:
	 <Statement> ::=   <Print> 
Lexeme - x, Line - 33:
	 <Expression>  ::= <Term><Expression’>
Lexeme - x, Line - 33:
	 <Term>  ::= <Factor><Term’>
Lexeme - x, Line - 33:
	 <Factor> ::= <Primary>
Lexeme - x, Line - 33:
	 <Primary> ::=  <Identifier> <Primary’>
Lexeme - ), Line - 33:
	 <Primary’> ::= <Empty>
Lexeme - ), Line - 33:
	 <Empty>   ::= <Empty>
Lexeme - ), Line - 33:
	 <Term’> ::= <Empty>
Lexeme - ), Line - 33:
	 <Empty>   ::= <Empty>
Lexeme - ), Line - 33:
	 <Expression’> ::= <Empty>
Lexeme - ), Line - 33:
	 <Empty>   ::= <Empty>
Lexeme - ;, Line - 33:
	 <Print> ::=	put ( <Expression>);
Lexeme - }, Line - 34:
	 <Statement List’> ::=  <Empty>
Lexeme - }, Line - 34:
	 <Empty>   ::= <Empty>
Lexeme - }, Line - 34:
	 <Compound> ::=   {  <Statement List>  }
Lexeme - else, Line - 35:
	 <If’> ::= else  <Statement>
Lexeme - if, Line - 35:
	 <Statement> ::=   <If> 
Lexeme - x, Line - 35:
	 <Condition> ::= 	<Expression>  <Relop>   <Expression>
Lexeme - x, Line - 35:
	 <Expression>  ::= <Term><Expression’>
Lexeme - x, Line - 35:
	 <Term>  ::= <Factor><Term’>
Lexeme - x, Line - 35:
	 <Factor> ::= <Primary>
Lexeme - x, Line - 35:
	 <Primary> ::=  <Identifier> <Primary’>
Lexeme - ==, Line - 35:
	 <Primary’> ::= <Empty>
Lexeme - ==, Line - 35:
	 <Empty>   ::= <Empty>
Lexeme - ==, Line - 35:
	 <Term’> ::= <Empty>
Lexeme - ==, Line - 35:
	 <Empty>   ::= <Empty>
Lexeme - ==, Line - 35:
	 <Expression’> ::= <Empty>
Lexeme - ==, Line - 35:
	 <Empty>   ::= <Empty>
Lexeme - ==, Line - 35:
	 <Relop> ::=    	==   |   !=	|   > 	|   <	|  <=   |	=>
Lexeme - 40, Line - 35:
	 <Expression>  ::= <Term><Expression’>
Lexeme - 40, Line - 35:
	 <Term>  ::= <Factor><Term’>
Lexeme - 40, Line - 35:
	 <Factor> ::= <Primary>
Lexeme - 40, Line - 35:
	 <Primary> ::=  <Integer>
Lexeme - ), Line - 35:
	 <Term’> ::= <Empty>
Lexeme - ), Line - 35:
	 <Empty>   ::= <Empty>
Lexeme - ), Line - 35:
	 <Expression’> ::= <Empty>
Lexeme - ), Line - 35:
	 <Empty>   ::= <Empty>
Lexeme - {, Line - 36:
	 <Statement> ::=   <Compound> 
Lexeme - x, Line - 37:
	 <Statement List> ::=   <Statement><Statement List’>
Lexeme - x, Line - 37:
	 <Statement> ::=   <Assign> 
Lexeme - x, Line - 37:
	 <Expression>  ::= <Term><Expression’>
Lexeme - x, Line - 37:
	 <Term>  ::= <Factor><Term’>
Lexeme - x, Line - 37:
	 <Factor> ::= <Primary>
Lexeme - x, Line - 37:
	 <Primary> ::=  <Identifier> <Primary’>
Lexeme - -, Line - 37:
	 <Primary’> ::= <Empty>
Lexeme - -, Line - 37:
	 <Empty>   ::= <Empty>
Lexeme - -, Line - 37:
	 <Term’> ::= <Empty>
Lexeme - -, Line - 37:
	 <Empty>   ::= <Empty>
Lexeme - -, Line - 37:
	 <Expression’> ::= -<Term><Expression’>
Lexeme - 10, Line - 37:
	 <Term>  ::= <Factor><Term’>
Lexeme - 10, Line - 37:
	 <Factor> ::= <Primary>
Lexeme - 10, Line - 37:
	 <Primary> ::=  <Integer>
Lexeme - ;, Line - 37:
	 <Term’> ::= <Empty>
Lexeme - ;, Line - 37:
	 <Empty>   ::= <Empty>
Lexeme - ;, Line - 37:
	 <Expression’> ::= <Empty>
Lexeme - ;, Line - 37:
	 <Empty>   ::= <Empty>
Lexeme - ;, Line - 37:
	 <Assign> ::= <Identifier> = <Expression> ;
Lexeme - put, Line - 38:
	 <Statement List’> ::=  <Statement List>
Lexeme - put, Line - 38:
	 <Statement> ::=   <Print> 
Lexeme - x, Line - 38:
	 <Expression>  ::= <Term><Expression’>
Lexeme - x, Line - 38:
	 <Term>  ::= <Factor><Term’>
Lexeme - x, Line - 38:
	 <Factor> ::= <Primary>
Lexeme - x, Line - 38:
	 <Primary> ::=  <Identifier> <Primary’>
Lexeme - ), Line - 38:
	 <Primary’> ::= <Empty>
Lexeme - ), Line - 38:
	 <Empty>   ::= <Empty>
Lexeme - ), Line - 38:
	 <Term’> ::= <Empty>
Lexeme - ), Line - 38:
	 <Empty>   ::= <Empty>
Lexeme - ), Line - 38:
	 <Expression’> ::= <Empty>
Lexeme - ), Line - 38:
	 <Empty>   ::= <Empty>
Lexeme - ;, Line - 38:
	 <Print> ::=	put ( <Expression>);
Lexeme - }, Line - 39:
	 <Statement List’> ::=  <Empty>
Lexeme - }, Line - 39:
	 <Empty>   ::= <Empty>
Lexeme - }, Line - 39:
	 <Compound> ::=   {  <Statement List>  }
Lexeme - else, Line - 40:
	 <If’> ::= else  <Statement>
Lexeme - if, Line - 40:
	 <Statement> ::=   <If> 
Lexeme - x, Line - 40:
	 <Condition> ::= 	<Expression>  <Relop>   <Expression>
Lexeme - x, Line - 40:
	 <Expression>  ::= <Term><Expression’>
Lexeme - x, Line - 40:
	 <Term>  ::= <Factor><Term’>
Lexeme - x, Line - 40:
	 <Factor> ::= <Primary>
Lexeme - x, Line - 40:
	 <Primary> ::=  <Identifier> <Primary’>
Lexeme - ==, Line - 40:
	 <Primary’> ::= <Empty>
Lexeme - ==, Line - 40:
	 <Empty>   ::= <Empty>
Lexeme - ==, Line - 40:
	 <Term’> ::= <Empty>
Lexeme - ==, Line - 40:
	 <Empty>   ::= <Empty>
Lexeme - ==, Line - 40:
	 <Expression’> ::= <Empty>
Lexeme - ==, Line - 40:
	 <Empty>   ::= <Empty>
Lexeme - ==, Line - 40:
	 <Relop> ::=    	==   |   !=	|   > 	|   <	|  <=   |	=>
Lexeme - 30, Line - 40:
	 <Expression>  ::= <Term><Expression’>
Lexeme - 30, Line - 40:
	 <Term>  ::= <Factor><Term’>
Lexeme - 30, Line - 40:
	 <Factor> ::= <Primary>
Lexeme - 30, Line - 40:
	 <Primary> ::=  <Integer>
Lexeme - ), Line - 40:
	 <Term’> ::= <Empty>
Lexeme - ), Line - 40:
	 <Empty>   ::= <Empty>
Lexeme - ), Line - 40:
	 <Expression’> ::= <Empty>
Lexeme - ), Line - 40:
	 <Empty>   ::= <Empty>
Lexeme - {, Line - 41:
	 <Statement> ::=   <Compound> 
Lexeme - x, Line - 42:
	 <Statement List> ::=   <Statement><Statement List’>
Lexeme - x, Line - 42:
	 <Statement> ::=   <Assign> 
Lexeme - x, Line - 42:
	 <Expression>  ::= <Term><Expression’>
Lexeme - x, Line - 42:
	 <Term>  ::= <Factor><Term’>
Lexeme - x, Line - 42:
	 <Factor> ::= <Primary>
Lexeme - x, Line - 42:
	 <Primary> ::=  <Identifier> <Primary’>
Lexeme - -, Line - 42:
	 <Primary’> ::= <Empty>
Lexeme - -, Line - 42:
	 <Empty>   ::= <Empty>
Lexeme - -, Line - 42:
	 <Term’> ::= <Empty>
Lexeme - -, Line - 42:
	 <Empty>   ::= <Empty>
Lexeme - -, Line - 42:
	 <Expression’> ::= -<Term><Expression’>
Lexeme - 10, Line - 42:
	 <Term>  ::= <Factor><Term’>
Lexeme - 10, Line - 42:
	 <Factor> ::= <Primary>
Lexeme - 10, Line - 42:
	 <Primary> ::=  <Integer>
Lexeme - ;, Line - 42:
	 <Term’> ::= <Empty>
Lexeme - ;, Line - 42:
	 <Empty>   ::= <Empty>
Lexeme - ;, Line - 42:
	 <Expression’> ::= <Empty>
Lexeme - ;, Line - 42:
	 <Empty>   ::= <Empty>
Lexeme - ;, Line - 42:
	 <Assign> ::= <Identifier> = <Expression> ;
Lexeme - put, Line - 43:
	 <Statement List’> ::=  <Statement List>
Lexeme - put, Line - 43:
	 <Statement> ::=   <Print> 
Lexeme - x, Line - 43:
	 <Expression>  ::= <Term><Expression’>
Lexeme - x, Line - 43:
	 <Term>  ::= <Factor><Term’>
Lexeme - x, Line - 43:
	 <Factor> ::= <Primary>
Lexeme - x, Line - 43:
	 <Primary> ::=  <Identifier> <Primary’>
Lexeme - ), Line - 43:
	 <Primary’> ::= <Empty>
Lexeme - ), Line - 43:
	 <Empty>   ::= <Empty>
Lexeme - ), Line - 43:
	 <Term’> ::= <Empty>
Lexeme - ), Line - 43:
	 <Empty>   ::= <Empty>
Lexeme - ), Line - 43:
	 <Expression’> ::= <Empty>
Lexeme - ), Line - 43:
	 <Empty>   ::= <Empty>
Lexeme - ;, Line - 43:
	 <Print> ::=	put ( <Expression>);
Lexeme - }, Line - 44:
	 <Statement List’> ::=  <Empty>
Lexeme - }, Line - 44:
	 <Empty>   ::= <Empty>
Lexeme - }, Line - 44:
	 <Compound> ::=   {  <Statement List>  }
Lexeme - else, Line - 45:
	 <If’> ::= else  <Statement>
Lexeme - if, Line - 45:
	 <Statement> ::=   <If> 
Lexeme - x, Line - 45:
	 <Condition> ::= 	<Expression>  <Relop>   <Expression>
Lexeme - x, Line - 45:
	 <Expression>  ::= <Term><Expression’>
Lexeme - x, Line - 45:
	 <Term>  ::= <Factor><Term’>
Lexeme - x, Line - 45:
	 <Factor> ::= <Primary>
Lexeme - x, Line - 45:
	 <Primary> ::=  <Identifier> <Primary’>
Lexeme - ==, Line - 45:
	 <Primary’> ::= <Empty>
Lexeme - ==, Line - 45:
	 <Empty>   ::= <Empty>
Lexeme - ==, Line - 45:
	 <Term’> ::= <Empty>
Lexeme - ==, Line - 45:
	 <Empty>   ::= <Empty>
Lexeme - ==, Line - 45:
	 <Expression’> ::= <Empty>
Lexeme - ==, Line - 45:
	 <Empty>   ::= <Empty>
Lexeme - ==, Line - 45:
	 <Relop> ::=    	==   |   !=	|   > 	|   <	|  <=   |	=>
Lexeme - 20, Line - 45:
	 <Expression>  ::= <Term><Expression’>
Lexeme - 20, Line - 45:
	 <Term>  ::= <Factor><Term’>
Lexeme - 20, Line - 45:
	 <Factor> ::= <Primary>
Lexeme - 20, Line - 45:
	 <Primary> ::=  <Integer>
Lexeme - ), Line - 45:
	 <Term’> ::= <Empty>
Lexeme - ), Line - 45:
	 <Empty>   ::= <Empty>
Lexeme - ), Line - 45:
	 <Expression’> ::= <Empty>
Lexeme - ), Line - 45:
	 <Empty>   ::= <Empty>
Lexeme - {, Line - 46:
	 <Statement> ::=   <Compound> 
Lexeme - x, Line - 47:
	 <Statement List> ::=   <Statement><Statement List’>
Lexeme - x, Line - 47:
	 <Statement> ::=   <Assign> 
Lexeme - x, Line - 47:
	 <Expression>  ::= <Term><Expression’>
Lexeme - x, Line - 47:
	 <Term>  ::= <Factor><Term’>
Lexeme - x, Line - 47:
	 <Factor> ::= <Primary>
Lexeme - x, Line - 47:
	 <Primary> ::=  <Identifier> <Primary’>
Lexeme - -, Line - 47:
	 <Primary’> ::= <Empty>
Lexeme - -, Line - 47:
	 <Empty>   ::= <Empty>
Lexeme - -, Line - 47:
	 <Term’> ::= <Empty>
Lexeme - -, Line - 47:
	 <Empty>   ::= <Empty>
Lexeme - -, Line - 47:
	 <Expression’> ::= -<Term><Expression’>
Lexeme - 10, Line - 47:
	 <Term>  ::= <Factor><Term’>
Lexeme - 10, Line - 47:
	 <Factor> ::= <Primary>
Lexeme - 10, Line - 47:
	 <Primary> ::=  <Integer>
Lexeme - ;, Line - 47:
	 <Term’> ::= <Empty>
Lexeme - ;, Line - 47:
	 <Empty>   ::= <Empty>
Lexeme - ;, Line - 47:
	 <Expression’> ::= <Empty>
Lexeme - ;, Line - 47:
	 <Empty>   ::= <Empty>
Lexeme - ;, Line - 47:
	 <Assign> ::= <Identifier> = <Expression> ;
Lexeme - put, Line - 48:
	 <Statement List’> ::=  <Statement List>
Lexeme - put, Line - 48:
	 <Statement> ::=   <Print> 
Lexeme - x, Line - 48:
	 <Expression>  ::= <Term><Expression’>
Lexeme - x, Line - 48:
	 <Term>  ::= <Factor><Term’>
Lexeme - x, Line - 48:
	 <Factor> ::= <Primary>
Lexeme - x, Line - 48:
	 <Primary> ::=  <Identifier> <Primary’>
Lexeme - ), Line - 48:
	 <Primary’> ::= <Empty>
Lexeme - ), Line - 48:
	 <Empty>   ::= <Empty>
Lexeme - ), Line - 48:
	 <Term’> ::= <Empty>
Lexeme - ), Line - 48:
	 <Empty>   ::= <Empty>
Lexeme - ), Line - 48:
	 <Expression’> ::= <Empty>
Lexeme - ), Line - 48:
	 <Empty>   ::= <Empty>
Lexeme - ;, Line - 48:
	 <Print> ::=	put ( <Expression>);
Lexeme - }, Line - 49:
	 <Statement List’> ::=  <Empty>
Lexeme - }, Line - 49:
	 <Empty>   ::= <Empty>
Lexeme - }, Line - 49:
	 <Compound> ::=   {  <Statement List>  }
Lexeme - else, Line - 50:
	 <If’> ::= else  <Statement>
Lexeme - if, Line - 50:
	 <Statement> ::=   <If> 
Lexeme - x, Line - 50:
	 <Condition> ::= 	<Expression>  <Relop>   <Expression>
Lexeme - x, Line - 50:
	 <Expression>  ::= <Term><Expression’>
Lexeme - x, Line - 50:
	 <Term>  ::= <Factor><Term’>
Lexeme - x, Line - 50:
	 <Factor> ::= <Primary>
Lexeme - x, Line - 50:
	 <Primary> ::=  <Identifier> <Primary’>
Lexeme - ==, Line - 50:
	 <Primary’> ::= <Empty>
Lexeme - ==, Line - 50:
	 <Empty>   ::= <Empty>
Lexeme - ==, Line - 50:
	 <Term’> ::= <Empty>
Lexeme - ==, Line - 50:
	 <Empty>   ::= <Empty>
Lexeme - ==, Line - 50:
	 <Expression’> ::= <Empty>
Lexeme - ==, Line - 50:
	 <Empty>   ::= <Empty>
Lexeme - ==, Line - 50:
	 <Relop> ::=    	==   |   !=	|   > 	|   <	|  <=   |	=>
Lexeme - 10, Line - 50:
	 <Expression>  ::= <Term><Expression’>
Lexeme - 10, Line - 50:
	 <Term>  ::= <Factor><Term’>
Lexeme - 10, Line - 50:
	 <Factor> ::= <Primary>
Lexeme - 10, Line - 50:
	 <Primary> ::=  <Integer>
Lexeme - ), Line - 50:
	 <Term’> ::= <Empty>
Lexeme - ), Line - 50:
	 <Empty>   ::= <Empty>
Lexeme - ), Line - 50:
	 <Expression’> ::= <Empty>
Lexeme - ), Line - 50:
	 <Empty>   ::= <Empty>
Lexeme - {, Line - 51:
	 <Statement> ::=   <Compound> 
Lexeme - x, Line - 52:
	 <Statement List> ::=   <Statement><Statement List’>
Lexeme - x, Line - 52:
	 <Statement> ::=   <Assign> 
Lexeme - x, Line - 52:
	 <Expression>  ::= <Term><Expression’>
Lexeme - x, Line - 52:
	 <Term>  ::= <Factor><Term’>
Lexeme - x, Line - 52:
	 <Factor> ::= <Primary>
Lexeme - x, Line - 52:
	 <Primary> ::=  <Identifier> <Primary’>
Lexeme - -, Line - 52:
	 <Primary’> ::= <Empty>
Lexeme - -, Line - 52:
	 <Empty>   ::= <Empty>
Lexeme - -, Line - 52:
	 <Term’> ::= <Empty>
Lexeme - -, Line - 52:
	 <Empty>   ::= <Empty>
Lexeme - -, Line - 52:
	 <Expression’> ::= -<Term><Expression’>
Lexeme - 10, Line - 52:
	 <Term>  ::= <Factor><Term’>
Lexeme - 10, Line - 52:
	 <Factor> ::= <Primary>
Lexeme - 10, Line - 52:
	 <Primary> ::=  <Integer>
Lexeme - ;, Line - 52:
	 <Term’> ::= <Empty>
Lexeme - ;, Line - 52:
	 <Empty>   ::= <Empty>
Lexeme - ;, Line - 52:
	 <Expression’> ::= <Empty>
Lexeme - ;, Line - 52:
	 <Empty>   ::= <Empty>
Lexeme - ;, Line - 52:
	 <Assign> ::= <Identifier> = <Expression> ;
Lexeme - put, Line - 53:
	 <Statement List’> ::=  <Statement List>
Lexeme - put, Line - 53:
	 <Statement> ::=   <Print> 
Lexeme - x, Line - 53:
	 <Expression>  ::= <Term><Expression’>
Lexeme - x, Line - 53:
	 <Term>  ::= <Factor><Term’>
Lexeme - x, Line - 53:
	 <Factor> ::= <Primary>
Lexeme - x, Line - 53:
	 <Primary> ::=  <Identifier> <Primary’>
Lexeme - ), Line - 53:
	 <Primary’> ::= <Empty>
Lexeme - ), Line - 53:
	 <Empty>   ::= <Empty>
Lexeme - ), Line - 53:
	 <Term’> ::= <Empty>
Lexeme - ), Line - 53:
	 <Empty>   ::= <Empty>
Lexeme - ), Line - 53:
	 <Expression’> ::= <Empty>
Lexeme - ), Line - 53:
	 <Empty>   ::= <Empty>
Lexeme - ;, Line - 53:
	 <Print> ::=	put ( <Expression>);
Lexeme - }, Line - 54:
	 <Statement List’> ::=  <Empty>
Lexeme - }, Line - 54:
	 <Empty>   ::= <Empty>
Lexeme - }, Line - 54:
	 <Compound> ::=   {  <Statement List>  }
Lexeme - endif, Line - 55:
	 <If’> ::= <Empty>
Lexeme - endif, Line - 55:
	 <Empty>   ::= <Empty>
Lexeme - ;, Line - 55:
	 <If> ::=     if  ( <Condition>  ) <Statement><If ’> endif;
Lexeme - ;, Line - 55:
	 <If> ::=     if  ( <Condition>  ) <Statement><If ’> endif;
Lexeme - ;, Line - 55:
	 <If> ::=     if  ( <Condition>  ) <Statement><If ’> endif;
Lexeme - ;, Line - 55:
	 <If> ::=     if  ( <Condition>  ) <Statement><If ’> endif;
Lexeme - ;, Line - 55:
	 <If> ::=     if  ( <Condition>  ) <Statement><If ’> endif;
Lexeme - ;, Line - 55:
	 <If> ::=     if  ( <Condition>  ) <Statement><If ’> endif;
Lexeme - ;, Line - 55:
	 <If> ::=     if  ( <Condition>  ) <Statement><If ’> endif;
Lexeme - ;, Line - 55:
	 <If> ::=     if  ( <Condition>  ) <Statement><If ’> endif;
Lexeme - ;, Line - 55:
	 <If> ::=     if  ( <Condition>  ) <Statement><If ’> endif;
Lexeme - ;, Line - 55:
	 <If> ::=     if  ( <Condition>  ) <Statement><If ’> endif;
Lexeme - }, Line - 56:
	 <Statement List’> ::=  <Empty>
Lexeme - }, Line - 56:
	 <Empty>   ::= <Empty>
Lexeme - }, Line - 56:
	 <Compound> ::=   {  <Statement List>  }
Lexeme - $, Line - 58:
	 <While> ::=  while ( <Condition>  )  <Statement> 
Lexeme - $, Line - 58:
	 <Statement List’> ::=  <Empty>
Lexeme - $, Line - 58:
	 <Empty>   ::= <Empty>
Lexeme - $, Line - 58:
	 <Empty>   ::= <Empty>
Lexeme - $, Line - 58:
	 <Rat22F>  ::=   <Opt Function Definitions>   $  <Opt Declaration List>  <Statement List>  $